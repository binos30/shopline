# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/admin/orders" do
  let!(:user) do
    User.create!(
      role: Role.find_or_create_by!(name: "Administrator"),
      email: "jd@gmail.com",
      password: "pass123",
      first_name: "John",
      last_name: "Doe"
    )
  end
  let!(:category) { Category.create!(name: "Category") }
  let!(:product) { Product.create!(name: "Product", category:) }
  let!(:stock) { product.stocks.create!(size: "L", quantity: 3) }

  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      product:,
      user:,
      product_name: product.name,
      product_price: product.price,
      size: stock.size,
      quantity: 2,
      customer_email: user.email,
      customer_full_name: user.full_name,
      customer_address: "my address 1"
    }
  end

  before { sign_in(user) }

  describe "GET /index" do
    it "renders a successful response" do
      Order.create! valid_attributes
      get admin_orders_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      order = Order.create! valid_attributes
      get admin_order_url(order)
      expect(response).to be_successful
    end
  end
end
