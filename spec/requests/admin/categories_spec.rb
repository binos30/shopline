# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/admin/categories" do
  let!(:user) do
    User.create!(
      role: Role.find_or_create_by!(name: "Administrator"),
      gender: "male",
      email: "jd@gmail.com",
      password: "pass123",
      first_name: "John",
      last_name: "Doe"
    )
  end

  # This should return the minimal set of attributes required to create a valid
  # Category. As you add validations to Category, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { name: "Category" } }

  let(:invalid_attributes) { { name: "" } }

  before { sign_in(user) }

  describe "GET /index" do
    it "renders a successful response" do
      Category.create! valid_attributes
      get admin_categories_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      category = Category.create! valid_attributes
      get admin_category_url(category)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_admin_category_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      category = Category.create! valid_attributes
      get edit_admin_category_url(category)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Category" do
        expect do post admin_categories_url, params: { category: valid_attributes } end.to change(
          Category,
          :count
        ).by(1)
      end

      it "redirects to the created category" do
        post admin_categories_url, params: { category: valid_attributes }
        expect(response).to redirect_to(admin_category_url(Category.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Category" do
        expect do post admin_categories_url, params: { category: invalid_attributes } end.not_to change(
          Category,
          :count
        )
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post admin_categories_url, params: { category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) { { name: "Category2" } }

      it "updates the requested category" do
        category = Category.create! valid_attributes
        patch admin_category_url(category), params: { category: new_attributes }
        category.reload
        expect(category.name).to eq("Category2")
      end

      it "redirects to the category" do
        category = Category.create! valid_attributes
        patch admin_category_url(category), params: { category: new_attributes }
        category.reload
        expect(response).to redirect_to(admin_category_url(category))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        category = Category.create! valid_attributes
        patch admin_category_url(category), params: { category: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested category" do
      category = Category.create! valid_attributes
      expect { delete admin_category_url(category) }.to change(Category, :count).by(-1)
    end

    it "redirects to the categories list" do
      category = Category.create! valid_attributes
      delete admin_category_url(category)
      expect(response).to redirect_to(admin_categories_url)
    end
  end
end
